version: 2.1

orbs:
  shellcheck: circleci/shellcheck@volatile
  python: circleci/python@volatile
  bats: circleci/bats@volatile
  codecov: codecov/codecov@volatile
  # shellcheck: circleci/shellcheck@2.0.0
  # terraform: circleci/terraform@1.0.1
  # python: circleci/python@0.3.2
  # bats: circleci/bats@1.0.0
  # codecov: codecov/codecov@1.1.1

commands:

  run-ansible_lint:
    description: run the ansible-lint command against playbooks
    parameters:
      ansible_lint-options:
        description: options to pass to ansible-lint
        type: string
        default: ''
      code-folder-path:
        description: if specific path is wanted, specify here
        type: string
        default: './ci/'
    steps:
      - run: |
          set -euxo pipefail
          code_folder_path='<< parameters.code-folder-path >>'
          path_to_check="${code_folder_path:-${PWD}}"
          find "${path_to_check}" -not \( -path "${path_to_check}/.git/*" \
            -o -path "${path_to_check}/prov_packer/bento/*" \) -type f -iname "*.yml" \
            -print0 | xargs -0 file | grep 'ASCII text' | cut -d ':' -f 1 |
            xargs -t pipenv run ansible-lint 

  run-pylint:
    description: "Run the pylint command with the python "
    parameters:
      pylint-options:
        description: options to pass to pylint
        type: string
        default: ''
      code-folder-path:
        description: if specific path is wanted, specify here
        type: string
        default: ''
    steps:
      - run: |
          set -eux
          code_folder_path='<< parameters.code-folder-path >>'
          path_to_check="${code_folder_path:-${PWD}}"
          find "${path_to_check}" -not \( -path "${path_to_check}/.git/*" \
            -o -path "${path_to_check}/prov_packer/bento/*" \) -type f -print0 |
            xargs -0 file | grep 'Python script' | cut -d ':' -f 1 |
            xargs -t pipenv run pylint 

  run-shellcheck:
    description: "Run the shellcheck orb in a very specific way."
    parameters:
      script-path:
        description: the path to where the script is to run shellcheck
        type: string
        default: scripts/circleci-shellcheck-command.sh
      severity:
        description: the severity for what shellcheck should lint with
        type: string
        default: error
      optional:
        description: the optional checks that shellcheck should include
        type: string
        default: ''
      format:
        description: the output format that shellcheck should use
        type: string
        default: ''
    steps:
      - shellcheck/install
      - run: shellcheck --version
      - run: bash '<< parameters.script-path >>' '<< parameters.severity >>|<< parameters.optional >>|<< parameters.format >>'

  terraform-lint:
    description: "Run terraform for linting."
    parameters:
      code-path:
        description: the folder where th code is at
        type: string
    steps:
      - checkout
      - run: |
          set -eux
          terraform init "<< parameters.code-path >>"
      - run: |
          set -eux
          terraform fmt -check -diff "<< parameters.code-path >>"
      - run: |
          set -eux
          terraform validate "<< parameters.code-path >>"
      # - terraform/fmt:
      #     path: "<< parameters.code-path >>"
      # - terraform/validate:
      #     path: "<< parameters.code-path >>"

  terraform-deploy:
    description: "Run terraform for deploying."
    parameters:
      code-path:
        description: the folder where th code is at
        type: string
    steps:
      - checkout
      - run: |
          set -eux
      # - terraform/fmt:
      #     path: "<< parameters.code-path >>"
  
  packer-lint:
    description: "Run packer for linting"
    parameters:
      vars-file:
        description: the file path to your variables file
        type: string
        default: ''
      template-file:
        description: the file path to your template file
        type: string
      only-builder:
        description: the only builder that you want to check
        type: string
        default: ''
    steps:
      - checkout
      - run: |
          set -eux
          
          packer_cmd=( 'packer' 'validate' )

          if [[ -n "<< parameters.vars-file >>" ]] ; then
            packer_cmd+=( '-var-file' '<< parameters.vars-file >>' )
          fi

          if [[ -n "<< parameters.vars-file >>" ]] ; then
            packer_cmd+=( '-only' '<< parameters.only-builder >>' )
          fi

          ${packer_cmd[@]} "<< parameters.template-file >>"

jobs:

  ansible-linting:
    executor: python/default
    steps:
      - checkout
      - python/install-packages:
          args: '-d --deploy'
      - run: |
          set -eux
          pipenv --version
          pipenv run python --version
          pipenv run ansible-lint --version
          pipenv run yamllint --version
      - run-ansible_lint

  python-linting:
    executor: python/default
    steps:
      - checkout
      - python/install-packages:
          args: '-d --deploy'
      - run: |
          set -eux
          pipenv --version
          pipenv run python --version
      - run-pylint

  packer-linting_vbox:
    docker:
      - image: 'hashicorp/packer:light'
    steps:
      - run: packer version
      - packer-lint:
          template-file: templates/template.json
          vars-file: templates/example-variables.json
          only-builder: virtualbox-iso

  packer-linting_vmware:
    docker:
      - image: 'hashicorp/packer:light'
    steps:
      - run: packer version
      - packer-lint:
          template-file: templates/template.json
          vars-file: templates/example-variables.json
          only-builder: vmware-iso

  packer-linting_aws:
    docker:
      - image: 'hashicorp/packer:light'
    steps:
      - run: packer version
      - packer-lint:
          template-file: templates/template.json
          vars-file: templates/example-variables.json
          only-builder: amazon-ebs

  terraform-linting:
    # executor: terraform/default
    docker:
      - image: 'hashicorp/terraform:light'
    steps:
      - run: terraform --version
      # linting the packet terraform files
      - terraform-lint:
          code-path: ci/packet_terraform
      # linting the aws terraform files
      # - terraform-lint:
      #     code-path: ci/kali_aws_info

  terraform-packet_deploy:
    # executor: terraform/default
    docker:
      - image: 'hashicorp/terraform:light'
    steps:
        - run: terraform --version
        - terraform-deploy:
            code-path: ci/packet_terraform
        # TODO: setup actual deployment

  shellcheck-warning:
    description: this is the bare minimum that shellcheck NEEDS to pass
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - run-shellcheck:
          severity: warning

  shellcheck-desired:
    description: this is the desired degree of shellcheck
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - run-shellcheck:
          severity: style
          optional: all
          format: gcc

  markdown-linting:
    description: linting markdown files
    docker:
      - image: cimg/ruby:2.7.1
    steps:
      - checkout
      # installing markdownlint
      - run: gem install mdl --no-document
      - run:  |
          find . -type f -iname '*.md' | xargs -t mdl -s .linting-configs/markdown-lint.rb

  generate-packer-file:
    description: generate packer template file
    executor: python/default
    steps:
      - checkout
      - python/install-packages:
          args: '--deploy'
      - run: pipenv run scripts/template-gen.py
      - run: cat kali-template.json

#   build:
#     machine: true
#     steps:
#       - checkout
#       - run: bash ./scripts/new-kali.sh
#       - run: bash ./ci/packer_build.sh
#       - store_artifacts:
#           path: /tmp/artifacts

workflows:
  version: 2
  # this is the workflow that will build the local image
  #   (i.e. the vagrant box w/local providers (i.e. Vbox, VMWare, etc..))
  dev-build_local-image:
      jobs:
        - shellcheck-warning
        - terraform-linting
        - markdown-linting
        - python-linting
        - ansible-linting
        - generate-packer-file:
            requires:
              - shellcheck-warning
              - terraform-linting
              - markdown-linting
              - python-linting
              - ansible-linting
        - packer-linting_vbox:
            requires:
              - generate-packer-file
        - packer-linting_vmware:
            requires:
              - generate-packer-file
        - packer-linting_aws:
            requires:
              - generate-packer-file
        - terraform-packet_deploy:
            requires:
              - packer-linting_vbox
              - packer-linting_vmware
              - packer-linting_aws
  linting-wanted:
      jobs:
        - shellcheck-desired
#     jobs:
#       - build:
#           filters:
#             branches:
#               only:
#                 - master
#                 - develop
      
#   weekly-build:
#     jobs:
#       - build
#     triggers:
#       - schedule:
#           cron: "0 0 * * 0"
#           filters:
#             branches:
#               only:
#                 - master
# notify:
#   webhooks:
#     # A list of hook hashes, containing the url field
#     # gitter hook
#     - url: https://webhooks.gitter.im/e/328863f5c67fb6135a75
