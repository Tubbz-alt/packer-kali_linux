version: 2.1

orbs:
  shellcheck: circleci/shellcheck@volatile
  terraform: circleci/terraform@volatile
  # shellcheck: circleci/shellcheck@2.0.0
  # terraform: circleci/terraform@1.0.1

commands:
  run-shellcheck:
    description: "Run the shellcheck orb in a very specific way."
    parameters:
      script-path:
        description: the path to where the script is to run shellcheck
        type: string
        default: scripts/circleci-shellcheck-command.sh
      severity:
        description: the severity for what shellcheck should lint with
        type: string
        default: error
      optional:
        description: the optional checks that shellcheck should include
        type: string
        default: ''
      format:
        description: the output format that shellcheck should use
        type: string
        default: ''
    steps:
      - shellcheck/install
      - run: shellcheck --version
      - run: bash << parameters.script-path >> '<< parameters.severity >>|<< parameters.optional >>|<< parameters.format >>'

  terraform-lint:
    description: "Run the terraform orb for linting."
    parameters:
      code-path:
        description: the folder where th code is at
        type: string
    steps:
      - checkout
      - terraform/fmt:
          path: "<< parameters.code-path >>"
      - terraform/validate:
          path: "<< parameters.code-path >>"

  terraform-deploy:
    description: "Run the terraform orb for deploying."
    parameters:
      code-path:
        description: the folder where th code is at
        type: string
    steps:
      - checkout
      - terraform/fmt:
          path: "<< parameters.code-path >>"
  
jobs:
  terraform-linting:
    executor: terraform/default
    steps:
      - run: terraform --version
      # linting the packet terraform files
      - terraform-lint:
          code-path: ci/packet_terraform
      # linting the aws terraform files
      # - terraform-lint:
      #     code-path: ci/kali_aws_info

  terraform-packet_deploy:
    executor: terraform/default
    steps:
        - run: terraform --version
        - terraform-deploy:
            code-path: ci/packet_terraform
        # TODO: setup actual deployment

  # shellcheck-base:
  #   description: this is the bare minimum that shellcheck NEEDS to pass
  #   docker:
  #     - image: 'cimg/base:stable'
  #   steps:
  #       - checkout
  #       - run-shellcheck

  shellcheck-warning:
    description: this is the bare minimum that shellcheck NEEDS to pass
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - run-shellcheck:
          severity: warning
  shellcheck-desired:
    description: this is the desired degree of shellcheck
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - run-shellcheck:
          severity: style
          optional: all
          format: gcc
#   build:
#     machine: true
#     steps:
#       - checkout
#       - run: bash ./scripts/new-kali.sh
#       - run: bash ./ci/packer_build.sh
#       - store_artifacts:
#           path: /tmp/artifacts

workflows:
  version: 2
  # this is the workflow that will build the local image
  #   (i.e. the vagrant box w/local providers (i.e. Vbox, VMWare, etc..))
  dev-build_local-image:
      jobs:
        - shellcheck-warning
        - terraform-linting
        - terraform-packet_deploy:
            requires:
              - shellcheck-warning
              - terraform-linting
  linting-wanted:
      jobs:
        - shellcheck-desired
#     jobs:
#       - build:
#           filters:
#             branches:
#               only:
#                 - master
#                 - develop
      
#   weekly-build:
#     jobs:
#       - build
#     triggers:
#       - schedule:
#           cron: "0 0 * * 0"
#           filters:
#             branches:
#               only:
#                 - master
# notify:
#   webhooks:
#     # A list of hook hashes, containing the url field
#     # gitter hook
#     - url: https://webhooks.gitter.im/e/328863f5c67fb6135a75
